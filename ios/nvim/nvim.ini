
" plugins
call plug#begin()

	Plug 'neoclide/coc.nvim', {'branch': 'release'}
	" Surround.vim
  Plug 'tpope/vim-surround'

  " Airline status bar
	Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
	" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
	Plug 'junegunn/vim-easy-align'

	" Any valid git URL is allowed
	Plug 'https://github.com/junegunn/vim-github-dashboard.git'

	" Multiple Plug commands can be written in a single line using | separators
	Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
	Plug 'neomake/neomake'
	Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
	Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
	Plug 'zchee/deoplete-go', { 'do': 'make' }
  Plug 'iamcco/coc-angular'	
	"Autocomplete Langs COC.NVIM
  Plug 'neoclide/coc.nvim', {'branch': 'release'}

 	"Files Search
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'

 	"NerdTree
	" Plug 'preservim/nerdtree'
	Plug 'scrooloose/nerdtree'
	Plug 'jistr/vim-nerdtree-tabs'

	" Iconos para dev nerdtree
	Plug 'ryanoasis/vim-devicons'
	
	"Snippets
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
	
	Plug 'joshdick/onedark.vim'
	" Plug 'scrooloose/nerdtree'
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'  " Temas para airline

	Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }
	Plug 'othree/html5.vim', { 'for': 'html' }
	Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
	Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
	
	Plug 'tpope/vim-fugitive'
	Plug 'editorconfig/editorconfig-vim'
	Plug 'dracula/vim'
	Plug 'airblade/vim-gitgutter'
  Plug 'mattn/emmet-vim'
	"  Plug 'codota/tabnine-vim'
call plug#end()


syntax on

colorscheme  dracula "onedark | Activa tema NeoSolarized
set number
set relativenumber
set ruler
set ts=2
set shiftwidth=2
set tabstop=2
" set tw=2
set encoding=UTF-8

let g:NERDTreeChDirMode = 2  " Cambia el directorio actual al nodo padre actual
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" deoplete
set completeopt=longest,menuone " auto complete setting
" let g:deoplete#enable_at_startup = 1
" let g:deoplete#enable_smart_case = 1
let g:deoplete#auto_complete_start_length = 1
let g:deoplete#keyword_patterns = {}
let g:deoplete#keyword_patterns['default'] = '\h\w*'
let g:deoplete#omni#input_patterns = {}
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
let g:deoplete#sources#go#align_class = 1

" neomake
autocmd BufWritePost * Neomake
let g:neomake_error_sign   = {'text': '✖', 'texthl': 'NeomakeErrorSign'}
let g:neomake_warning_sign = {'text': '∆', 'texthl': 'NeomakeWarningSign'}
let g:neomake_message_sign = {'text': '➤', 'texthl': 'NeomakeMessageSign'}
let g:neomake_info_sign    = {'text': 'ℹ', 'texthl': 'NeomakeInfoSign'}
"let g:neomake_go_enabled_makers = [ 'go', 'gometalinter' ]
"let g:neomake_go_gometalinter_maker = {
"   \ 'args': [
"  \   '--tests',
"  \   '--enable-gc',
"  \   '--concurrency=3',
"  \   '--fast',
"  \   '-D', 'aligncheck',
"  \   '-D', 'dupl',
"  \   '-D', 'gocyclo',
"  \   '-D', 'gotype',
"  \   '-E', 'errcheck',
"  \   '-E', 'misspell',
"  \   '-E', 'unused',
"  \   '%:p:h',
"  \ ],
"  \ 'append_file': 0,
"  \ 'errorformat':
"  \   '%E%f:%l:%c:%trror: %m,' .
"  \   '%W%f:%l:%c:%tarning: %m,' .
"  \   '%E%f:%l::%trror: %m,' .
"  \   '%W%f:%l::%tarning: %m'
"  \ }


" install missing plugins on start
autocmd VimEnter *
  \  if !empty(filter(copy(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall
  \| endif


"****************************************************************************
" go-vim settings
"****************************************************************************
let g:go_fmt_command = "goimports"
" Status line types/signatures.
let g:go_auto_type_info = 1
" autocomplete prompt to appear automatically whenever you press the dot (.)
au filetype go inoremap <buffer> . .<C-x><C-o>


"****************************************************************************
" vim-airline settings
"****************************************************************************
let g:airline_theme = 'powerlineish'
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1

"****************************************************************************
" snippets settings
"****************************************************************************
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


noremap <Leader>ga :Gwrite<CR>


let g:transparent_enabled = v:false

highlight Normal ctermbg=none
